----------------------------
Les Composants
----------------------------

On utilise le Pascal case pour :
- le nom de nos composants
- le nom des fonctions à l'intérieur des fichiers

Un composant  = une fonction (avant c'était des classes)

Balise auto fermante si rien à l'intérieur (pas d'enfant)


----------------------------
Les imports exports
----------------------------

    import {bike, drive} from "./emplacement"

export const bike = "Royal Enfield"
export function drive() {}

[ou bien, ne pas utiliser le mot 'export' avant un emplacement
mais les regrouper dans un export multiple]
    export {bike, drive}

[Ou bien un seul export par default,
qui permet d'importer en changeant le nom (attention aux erreurs)]
    export default bike
    import aaaaaaaa from "./emplacement"

[ou bien mixer les 2]
    import aaaaaaaa, {bike, drive} from "./emplacement"



----------------------------
Render
----------------------------

Ce qu'on peut Render :
    - String, Number, les arrays (sous conditions), html, jsx

Ce qu'on ne peut pas Render :
    - Boolean, Undefined, Null

Ce qui fait cracher le Render
    - Les Objets (sans entrer à l'intérieur)


----------------------------
Render du JSX
----------------------------

- Il faut un parent dès 2 élements enfants cote à cote
- Si élément parent 'inutile', utiliser un fragment <> (invisible dans le html)

- On écrit le JSX en camelCase (malgré quelques exceptions)
- Possibilité de mixer du HTML et des composants importés, eux même importer (inception)


----------------------------
Formater son code
----------------------------

ctrl + shift + p
  Écrire 'format'
    Choisir la ligne correspond
      Choisir son outil de formatage

ctrl + shift + p
  Verifier les settings user en json


----------------------------
Les Props : les définir
----------------------------

Suite à notre import, lors de notre code, on peut envoyer plusieurs types de données
    (string, number, objets, function, jsx comme une image, etc...)

Pour les afficher :  
    Ajouter le paramètre props dans fonction du fichier d'export + console.log(props)

Lors du console log, on verra le JSX qu'on a passé en props


----------------------------
Les Props : les utiliser
----------------------------

Pour utiliser nos éléments dans la fonction 
    {props.elementName}


----------------------------
Les Props : Read Only !
----------------------------

Les Props ne peuvent pas être modifiées comme une variable
  props.age = props.age+10
Cet exemple est impossible 


----------------------------
Les Props : children
----------------------------

Si on souhaite intégrer un children 
  On écrit simplement notre JSX (dans le lieu d'exportation)
    mais on ajoute { props.childen }  (dans notre function à exporter)

On peut vérifier dans le console.log (props)
  il y a une nouvelle propriété : children