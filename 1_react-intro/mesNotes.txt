-----------------------------------------------------
-----------------------------------------------------
Les Composants
-----------------------------------------------------
-----------------------------------------------------

On utilise le PascalCase pour :
- le nom de nos composants
- le nom des fonctions à l'intérieur des fichiers

Un composant  = une fonction (avant c'était des classes)

Balise auto fermante si rien à l'intérieur (pas d'enfant)


-----------------------------------------------------
-----------------------------------------------------
Le placement des Composants 
-----------------------------------------------------
-----------------------------------------------------

Dans un dossier "components", 
  puis, dans un dossier qui aura le même nom que le fichier


-----------------------------------------------------
-----------------------------------------------------
Les imports exports
-----------------------------------------------------
-----------------------------------------------------

    import {bike, drive} from "./emplacement"

export const bike = "Royal Enfield"
export function drive() {}

[ou bien, ne pas utiliser le mot 'export' avant un emplacement
mais les regrouper dans un export multiple]
    export {bike, drive}

[Ou bien un seul export par default,
qui permet d'importer en changeant le nom (attention aux erreurs)]
    export default bike
    import aaaaaaaa from "./emplacement"

[ou bien mixer les 2]
    import aaaaaaaa, {bike, drive} from "./emplacement"


-----------------------------------------------------
-----------------------------------------------------
Render
-----------------------------------------------------
-----------------------------------------------------

Ce qu'on peut Render :
    - String, Number, les arrays (sous conditions), html, jsx

Ce qu'on ne peut pas Render :
    - Boolean, Undefined, Null

Ce qui fait cracher le Render
    - Les Objets (la racine, sans entrer à l'intérieur)


-----------------------------------------------------
-----------------------------------------------------
Render du JSX
-----------------------------------------------------
-----------------------------------------------------

- Il faut un parent des 2 éléments enfants cote à cote
- Si élément parent 'inutile', utiliser un fragment <> (invisible dans le html)

- On écrit le JSX en camelCase (malgré quelques exceptions)
- Possibilité de mixer du HTML et des composants importés, eux même importés (inception)


-----------------------------------------------------
-----------------------------------------------------
Formater son code
-----------------------------------------------------
-----------------------------------------------------

ctrl + shift + p
  Écrire 'format'
    Choisir la ligne correspond
      Choisir son outil de formatage

ctrl + shift + p
  Vérifier les settings user en json


-----------------------------------------------------
-----------------------------------------------------
Les Props : les définir
-----------------------------------------------------
-----------------------------------------------------

Suite à notre import, lors de notre code, on peut envoyer tous types de données
    (string, number, objets, function, jsx comme une image, etc...)

Pour les afficher :  
    Ajouter le paramètre props dans fonction du fichier d'export + console.log(props)

Lors du console log, on verra le JSX qu'on a passé en props


-----------------------------------------------------
-----------------------------------------------------
Les Props : les utiliser
-----------------------------------------------------
-----------------------------------------------------

Pour utiliser nos éléments dans la fonction 
    {props.elementName}


-----------------------------------------------------
-----------------------------------------------------
Les Props : Read Only !
-----------------------------------------------------
-----------------------------------------------------

Les Props ne peuvent pas être modifiées comme une variable
  props.age = props.age+10
Cet exemple est impossible : les Props ne peuvent pas muter !


-----------------------------------------------------
-----------------------------------------------------
Les Props : children
-----------------------------------------------------
-----------------------------------------------------

Si on souhaite intégrer un children 
  On écrit simplement notre JSX (dans le lieu d'exportation)
    mais on ajoute { props.children }  (dans notre function à exporter)

On peut vérifier dans le console.log (props)
  il y a une nouvelle propriété : children


-----------------------------------------------------
-----------------------------------------------------
Conditional Rendering
-----------------------------------------------------
-----------------------------------------------------

Une condition de render est possible dans notre function avant export
  - Par exemple un classique if / else, ou un autre du style :
  - <li> { props.fonction && "il fait beau} </li>

Les conditions peuvent provenir du fichier à exporter,
  avec des conditions issus de la fonction, ou d'autres fonctions 
    (attention aux majuscules des noms de fonctions !)


-----------------------------------------------------
-----------------------------------------------------
Les Variables dans un Composant
-----------------------------------------------------
-----------------------------------------------------

Les variables qu'on a dans un Composant ne sont pas réactives
    Donc : pas de re-Rendering du Composant

Pour ça : on a besoin des States


-----------------------------------------------------
-----------------------------------------------------
Les States : permet un changement, une réactivité
-----------------------------------------------------
-----------------------------------------------------

Vouloir actualisation = rafraîchissement  = un re-Render

Le State change = le Composant re-Render

Du coup, un composant va re-Render quand :
  - ses States changent 
  - ses Props changent

Modifier la valeur d'un State par affectation = re-Rendering 
  Pour ça : utilise le setter ! (setMot)

TOUJOURS passer par une fonction pour modifier une valeur


-----------------------------------------------------
-----------------------------------------------------
Les States : le nommage
-----------------------------------------------------
-----------------------------------------------------

Utiliser la convention de nommage
  const [mot, setMot] = useState(10)

mot = valeur
setMot = function pour modifier la valeur
useState(valeur) = valeur initiale

C'est un des Hooks de React (il y en a plusieurs)

Ne pas oublier de l'importer
    import { useState } from "react";


-----------------------------------------------------
-----------------------------------------------------
Les States : Warning
-----------------------------------------------------
-----------------------------------------------------

Attention à ne pas tomber dans une boucle infinie d'erreur :
    ne pas Setter dans un corps de composant (function) (où ça render)

Le Render peut prendre un certain temps (comme une promesse) :
    - On évite les console.log() de Set juste après un Setter
    - On console.log() en dehors de la fonction (mais tjr dans le Composant)
    - On utilisera plus tard un useEffect (un outil pour 'écouter')


-----------------------------------------------------
-----------------------------------------------------
Le Style : Inline CSS (JSS)
-----------------------------------------------------
-----------------------------------------------------

Utiliser du camelCase
Possibilité de conditions (ternaire)


-----------------------------------------------------
-----------------------------------------------------
Le Style : Fichier CSS
-----------------------------------------------------
-----------------------------------------------------

On commence par importer notre fichier css
    import"./style.css"

Puis on ajoute où l'on désire notre css, par exemple
    return <div className="uneClasseDeNotreFichierCss"

Important : on doit importer le fichier avant les autres,
  afin de pouvoir utiliser les styles dans d'autres Composants


-----------------------------------------------------
-----------------------------------------------------
Le Style : CSS Modules (super pour éviter les conflits)
-----------------------------------------------------
-----------------------------------------------------

On le nomme avec l'ajout de .module
    style.module.css

On l'importe dans notre composant
  import nomDexemple from "./style.modules.css

Et on l'utilise 
  export function Car() {
    return <div className={nomDexemple.nomDeClass} />
  }

Pour utiliser plusieurs css dans un élément (penser espace)
   className={nomEx.nomDeClass + " " + nomEx.nomDeClass}
Pas top...

Plutôt utiliser des backticks + template literal + espace
   className={`${nomEx.nomDeClass} ${nomEx.nomDeClass}`}


-----------------------------------------------------
-----------------------------------------------------
Les Callback Functions
-----------------------------------------------------
-----------------------------------------------------

C'est un moyen de faire communiquer un parent avec son enfant, 
via des fonctions

Une fonction Callback, comme toutes les fonctions, peut être call plusieurs fois

Plutôt que d'appeler une fonction dans un élément, on peut :
  Dans notre fichier Composant (Car)
  <button onClick={props.onCarClick}> Click </button>

  Dans notre App :
  <Car onCarClick= {nomDeFonctionDansLeFichierApp} />


-----------------------------------------------------
-----------------------------------------------------
Les Callback Functions avec paramètres : retarder l'appel 
-----------------------------------------------------
-----------------------------------------------------

Mettre de parenthèse avec info dans les fonctions à call = déclenchement direct
Donc si on attend un Event, comme un click, aucun intérêt à en mettre un

De ce fait, dans notre fichier Composant (car), faire une fonction avec paramètre
(fonction fléchée ou non, aucune différence maintenant, comparé à avant avec class )
  function onClick() {
    props.OnCarClick(10)
  }

Et l'appeler plus loin dans notre Composant, non pas par une props comme avant,
(car la props a déjà été écrite dans le paramètre de fonction)
  <button onClick={props.onCarClick}> Click </button>
Mais plutôt avec :
  <button onClick={onClick}> Click </button>

Sinon, sans même utiliser de function onClick, 
on peut, dans notre bouton, faire une fonction fléchée, avec ou sans accolade
(Par contre, c'est un peu moins performant qu'une fonction en dehors)
      <button onClick={() => props.onCarClick(2)}>click</button>

Pour résumer, 3 façons de faire notre Callback :
- soit dans un fichier App, via une fonction (et un call plus loin dans ce fichier)
- soit dans un fichier composant, via une fonction, (et un call plus loin)
- soit dans un fichier composant, via une fonction fléchée (anonyme) directement 


-----------------------------------------------------
-----------------------------------------------------

-----------------------------------------------------
-----------------------------------------------------
